openapi: "3.0.3"
info:
  title: BEDEV2 - apis.roblox.com
  description: |
    ## **DO NOT ENTER SENSITIVE INFORMATION HERE.**
    ### You cannot make requests from this page due to CORS. Anything requiring authentication is to share what types of auth you need to use for an endpoint.

    ## Notes
    - The terms "game", "universe", and "experience" are interchangable.
    - "Developer Product ID" is separate from "Product ID"
      - The "Product ID" is what most people are familiar with, while "Developer Product ID" is something seperate that's used internally.
    - "BrowserTrackerID" is the "RBXEventTrackerV2" cookie
    - "SessionID" for Discovery API is the "RBXSessionTracker" cookie
    - Asset types can be found here: [https://create.roblox.com/docs/reference/engine/enums/AssetType](https://create.roblox.com/docs/reference/engine/enums/AssetType)

    ## TODO
    - Add /discovery-api/ endpoints
    - Add /universes/v1/search endpoint (this is limited to your own universes)
    - Add /universe-analytics-raqi/ endpoints
    - Add /developer-analytics-aggregations/ endpoints
    - ...
  version: ""
servers:
  - url: https://apis.roblox.com/

paths:
  # Maintenance Status
  /maintenance-status/v1/alerts/alert-info: # Get maintenance status
    get:
      summary: Get maintenance status
      security: []
      tags:
        - Maintenance Status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MaintenanceStatus_AlertInfoResponse"

  # Gamepasses
  /game-passes/v1/game-passes: # Create a Gamepass
    post:
      summary: Create a Gamepass
      security:
        - UserAccount: []
      tags:
        - Gamepasses
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Gamepass_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gamepass_CreateResponse"
  /game-passes/v1/game-passes/{gamePassId}/details: # Get Gamepass details
    get:
      summary: Get Gamepass details
      description: Get details of a Gamepass. This does not require authentication, however you may experience better rate limits if you are.
      parameters:
        - name: gamePassId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Gamepasses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gamepass_DetailsResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailsNotFoundResponse"

    post:
      summary: Update a Gamepass
      description: Update a Gamepass. This requires authentication.
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Gamepasses
      parameters:
        - name: gamePassId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Gamepass_UpdateBody"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/EmptyBody"
  /game-passes/v1/game-passes/{gamePassId}/product-info: # Get Gamepass product info
    get:
      summary: Get Gamepass product info (e.g. MarketplaceService:GetProductInfo())
      description: There are invalid fields in the response, but it's decent enough.
      security: []
      parameters:
        - name: gamePassId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Gamepasses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Gamepass_ProductInfoResponse"

  # Developer Products
  /developer-products/v1/universes/{universeId}/developerproducts: # Create a Developer Product
    get:
      summary: Get Developer Products for a Universe
      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            default: 50
      tags:
        - Developer Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProduct_GetUniverseProductsResponse"
    post:
      summary: Create a Developer Product
      description: Create a Developer Product. This requires authentication.
      tags:
        - Developer Products
      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
        - name: name
          in: query
          required: true
          schema:
            type: string
        - name: description
          in: query
          required: true
          schema:
            type: string
        - name: priceInRobux
          in: query
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProduct_CreateResponse"
  /developer-products/v1/developer-products/{devProductId}: # Get Developer Product details by Developer Product ID
    get:
      summary: Get Developer Product details by Developer Product ID
      description: |
        Developer products have a different internal ID, and this endpoint uses that ID instead of the usual one.
        This does not require authentication.
      parameters:
        - name: devProductId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Developer Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProduct_DevProductIDDetailsResponse"
  /developer-products/v1/developer-products/{productId}/details: # Get Developer Product details by Product ID
    get:
      summary: Get Developer Product details by Product ID
      description: Get the details of a Developer Product by it's typically used ID. This does not require authentication.
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Developer Products
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProduct_DetailsResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailsNotFoundResponse"
  /developer-products/v1/universes/{universeId}/developerproducts/{productId}/update: # Update a Developer Product
    get:
      summary: Update a Developer Product
      security:
        - UserAccount: []

      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Developer Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeveloperProduct_UpdateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyBody"
  /developer-products/v1/developer-products/{devProductId}/image:
    post:
      summary: Update a Developer Product's image
      description: Update a Developer Product's image. This requires authentication.
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Developer Products
      parameters:
        - name: devProductId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/DeveloperProduct_UpdateImageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeveloperProduct_UpdateImageResponse"

  # Assets
  /assets/user-auth/v1/assets/{assetId}:
    get:
      summary: Get asset creation details
      description: Get the metadata of an uploaded asset. This does not require authentication... for some reason.
      parameters:
        - name: assetId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Assets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assets_MetadataResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Assets_BadRequestResponse"

  # Asset Permissions
  /asset-permissions-api/v1/assets/check-permissions:
    post:
      summary: Check if subject has permission to manage an asset
      description: "You must have permission for the Subject. For example, if the subject is a User, you must be that user."
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Asset Permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetPermissions_CheckPermissionsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetPermissions_CheckPermissionsResponse"
  /asset-permissions-api/v1/assets/{assetId}/permissions:
    patch:
      summary: Grant a universe permission to use this asset
      security:
        - UserAccount: []
        - CSRF: []
      parameters:
        - name: assetId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Asset Permissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetPermissions_GrantPermissionsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyBody"

  # Asset Text Filter Settings
  /asset-text-filter-settings/public/universe/{universeId}:
    get:
      summary: Get asset text filter settings for a Universe
      security: []
      tags:
        - Asset Text Filter Settings
      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssetTextFilterSettings_GetUniverseResponse"

  # Universes
  /universes/v1/universes/create:
    post:
      summary: Create a new Experience
      security:
        - UserAccount: []
      tags:
        - Universes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Universe_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Universe_CreateResponse"
  /universes/v1/user/universes/{universeId}/places:
    post:
      summary: Create a place within an Experience
      security:
        - UserAccount: []
      tags:
        - Universes
      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Universe_CreateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Universe_CreatePlaceResponse"
  /universes/v1/places/{placeId}/universe:
    get:
      summary: Get the Universe ID of a place
      security: []
      tags:
        - Universes
      parameters:
        - name: placeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Universe_GetUniverseResponse"

  # Organizations (Creator Groups)
  /orgs/v1/organizations:
    get:
      summary: Get org for a group
      security:
        - UserAccount: []
      parameters:
        - name: groupId
          in: query
          required: true
          schema:
            type: integer
      tags:
        - Organizations (Creator Groups)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orgs_GetOrgResponse"
  /orgs/v1/organizations/{orgId}/users/{userId}/permissions:
    get:
      summary: Get permissions for a user in an org
      description: This only works for the authenticated user.
      security:
        - UserAccount: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Organizations (Creator Groups)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orgs_GetUserPermissionsResponse"
  /orgs/v1/organizations/{orgId}/users:
    get:
      summary: Get users in an org
      security:
        - UserAccount: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Organizations (Creator Groups)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orgs_GetUsersResponse"
  /orgs/v1/organizations/{orgId}/roles:
    get:
      summary: Get roles in an org
      security:
        - UserAccount: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Organizations (Creator Groups)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orgs_GetRolesResponse"
  /orgs/v1/organizations/{orgId}/roles/{roleId}/permissions:
    get:
      summary: Get permissions for a role in an org
      security:
        - UserAccount: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Organizations (Creator Groups)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orgs_GetRolePermissionsResponse"
    patch:
      summary: Update a role's permissions
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Organizations (Creator Groups)
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Orgs_UpdateRolePermissionsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
  /orgs/v1/organizations/{orgId}/users/{userId}/roles/{roleId}:
    post:
      summary: Add a user to a role
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Organizations (Creator Groups)
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean

  # Cloud Authentication
  /cloud-authentication/v1/apiKey/{apiKeyId}:
    get:
      summary: Get an Open Cloud API key
      security: []
      tags:
        - Cloud Authentication
      parameters:
        - name: apiKeyId
          in: path
          required: true
          schema:
            type: string
            example: "00000000-0000-0000-0000-000000000000"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAuthentication_CloudAuthInfoResponse"
  /cloud-authentication/v1/apiKey:
    post:
      summary: Create or Update an Open Cloud API key
      description: |
        ### Notes
        - #### API keys cannot share the same name.
        - #### You must have permission to create and edit API keys for the group, if specified.
        - #### If `groupId` is specified, the API key will be created for the group. Otherwise, it will be created for the user.
        - #### If `cloudAuthId` is specified, the API key will be updated with the specified ID. Otherwise, a new API key will be created.
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Cloud Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudAuthentication_CreateApiKeyBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAuthentication_CloudAuthInfoResponse"

  # User Profile
  /user-profile-api/v1/user/profiles/get-profiles:
    post:
      summary: Get user profiles
      security: []
      tags:
        - User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile_GetProfilesBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile_GetProfilesResponse"

  # User Settings
  /user-settings-api/v1/user-settings:
    get:
      summary: Get user settings
      security:
        - BrowserTrackerID: []
        - UserAccount: []
        - CSRF: []
      tags:
        - User Settings
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings_GetSettingsResponse"
    post:
      summary: Update user settings
      description: This accepts partial settings data. Settings that change other settings is *likely* what is returned within the `cascadingSettingUpdates` property.
      security:
        - BrowserTrackerID: []
        - UserAccount: []
        - CSRF: []
      tags:
        - User Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettings_SetSettingsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSettings_SetSettingsResponse"

  # Marketplace Items
  /marketplace-items/v1/items/details:
    post:
      summary: Get marketplace item details
      description: This will **always** return 200 OK, even if invalid data is passed or the item doesn't exist.
      security: []
      tags:
        - Marketplace Items
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarketplaceItems_DetailsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketplaceItems_DetailsResponse"
  /marketplace-sales/v1/item/{collectibleItemId}/resellers:
    get:
      summary: Get marketplace item resellers
      description: "**Note:** This endpoint is on **/marketplace-sales** and not **/marketplace-items**."
      parameters:
        - name: collectibleItemId
          in: path
          required: true
          schema:
            type: string
            example: "00000000-0000-0000-0000-000000000000"
        - name: limit
          in: query
          required: true
          description: There is no real limit, but it will timeout if it takes too long. Be reasonable.
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          required: false
          description: The cursor to use for pagination.
          schema:
            type: string
      tags:
        - Marketplace Items
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarketplaceItems_ResellersResponse"

  # Account Switcher
  /account-switcher/v1/getLoggedInUsersMetadata:
    post:
      summary: Get all accounts logged in
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Account Switcher
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountSwitcher_GetLoggedInUsersMetadataBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountSwitcher_GetLoggedInUsersMetadataResponse"

  # Profile Insights
  /profile-insights/v1/multiProfileInsights:
    post:
      summary: Get profile insights for multiple users
      description: |
        Objects such as `mutualFriendInsight` and `offlineFrequentsInsight` only exist if the `insightCase` matches their respective case ID.

        ## Insight Cases
        - 1: Mutual Friends
        - 3: Offline Frequents
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Profile Insights
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileInsights_GetMultiInsightsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileInsights_GetMultiInsightsResponse"

  # Profile Platform
  /profile-platform/v1/profile/get:
    post:
      summary: Get profile platform data
      security: []
      tags:
        - Profile Platform
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfilePlatform_GetBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfilePlatform_GetResponse"

  # Creator Home
  /creator-home-api/v1/groups:
    get:
      summary: Get groups you are a creator in
      description: This returns groups that you can create experiences or marketplace items in.
      security:
        - UserAccount: []
      tags:
        - Creator Home
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatorHome_GetGroupsResponse"

  # Toolbox Service
  /toolbox-service/v1/items/details:
    get:
      summary: Get details of items you've created
      description: This only returns items you or a group you're a creator in have created.
      security:
        - UserAccount: []
      tags:
        - Toolbox Service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolboxService_GetItemsDetailsResponse"
        "404":
          description: Not Found
  /toolbox-service/v1/creations/{subjectType}/{subjectId}/{assetTypeId}:
    get:
      summary: Get creations
      security:
        - UserAccount: []
      tags:
        - Toolbox Service
      parameters:
        - name: subjectType
          in: path
          required: true
          schema:
            type: string
            enum: ["group", "user"]
        - name: subjectId
          in: path
          required: true
          schema:
            type: integer
        - name: assetTypeId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ToolboxService_GetCreationsResponse"

  # Community
  /community-links/v1/universes/{universeId}/community:
    get:
      summary: Get Guilded community info for a Universe
      security:
        - UserAccount: []
      parameters:
        - name: universeId
          in: path
          required: true
          schema:
            type: integer
      tags:
        - Community
      responses:
        "204":
          description: No community found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyBody"
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Community_GetUniverseCommunityResponse"

  # Voting
  /voting-api/user/get-vote-count:
    get:
      summary: Get a count of how many times you've voted for a type of asset.
      security:
        - UserAccount: []
      tags:
        - Voting
      parameters:
        - name: targetType
          in: query
          required: true
          schema:
            type: string
            enum: ["Place", "Image", "Audio", "Model"]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Voting_GetVoteCountResponse"

  # Phone Numbers
  /phone-number-api/v1/phone-prefix-list:
    get:
      summary: Get phone number prefix list for countries
      security: []
      tags:
        - Phone Numbers
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhoneNumber_PhonePrefixListResponse"

  # Share Links
  /sharelinks/v1/get-or-create-link:
    post:
      summary: Get or create a share link (QR codes)
      security:
        - UserAccount: []
        - CSRF: []
      tags:
        - Share Links
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareLinks_GetOrCreateLinkBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShareLinks_GetOrCreateLinkResponse"

components:
  schemas:
    EmptyObject:
      type: object
      description: An empty object.
    EmptyBody:
      type: string
      description: An empty body.
      example: ""

    # Maintenance Status
    MaintenanceStatus_AlertInfoResponse:
      type: object
      properties:
        IsVisible:
          type: boolean
        Text:
          type: string
        LinkUrl:
          type: string

    # Gamepasses
    Gamepass_CreateBody:
      type: object
      properties:
        Name:
          type: string
          description: The name of the Gamepass.
        Description:
          type: string
          description: The description of the Gamepass.
        UniverseId:
          type: integer
          description: The universe ID this Gamepass is for.
    Gamepass_CreateResponse:
      type: object
      properties:
        gamePassId:
          type: integer
          description: The ID of the Gamepass that was created.
    Gamepass_UpdateBody:
      type: object
      properties:
        Name:
          type: string
          description: The name of the Gamepass.
        Description:
          type: string
          description: The description of the Gamepass.
    Gamepass_DetailsResponse:
      type: object
      description: A Gamepass object.
      properties:
        gamePassId:
          type: integer
          description: The Gamepass ID.
        name:
          type: string
          description: The Gamepass name.
        description:
          type: string
          description: The Gamepass description.
        isForSale:
          type: boolean
          description: Whether the Gamepass is for sale.
        price:
          type: integer
          description: The Gamepass price.
          nullable: true
        iconAssetId:
          type: integer
          description: The Gamepass icon asset ID.
        placeId:
          type: integer
          description: The place ID this Gamepass is for.
        marketPlaceFeesPercentage:
          type: number
          description: The marketplace fees percentage.
          example: 0.3
        gamePassSalesData:
          type: object
          properties:
            totalSales:
              type: integer
              description: The total sales for this Gamepass.
            salesPast7Days:
              type: integer
              description: The sales for this Gamepass in the past 7 days.
        createdTimestamp:
          type: string
          description: The timestamp when the Gamepass was created.
          example: "2021-01-01T00:00:00Z"
        updatedTimestamp:
          type: string
          description: The timestamp when the Gamepass was last updated.
          example: "2021-01-01T00:00:00Z"
        priceInformation:
          description: The price information for the Gamepass. Seems to be some internal data for Roblox.
          nullable: true
          type: object
          properties:
            defaultPriceInRobux:
              type: integer
              description: The default price in Robux. This is the same as the `price` property.
            isInActivePriceOptimizationExperiment:
              type: boolean
              description: Whether the Gamepass is in the active price optimization experiment. Internal Roblox stuff.
    Gamepass_ProductInfoResponse:
      type: object
      properties:
        TargetId:
          type: integer
        ProductType:
          type: string
          nullable: true
        AssetId:
          type: integer
        ProductId:
          type: integer
        Name:
          type: string
        Description:
          type: string
        AssetTypeId:
          type: integer
          nullable: true
        Creator:
          type: object
          properties:
            Id:
              type: integer
            Name:
              type: string
              nullable: true
            CreatorType:
              type: string
              nullable: true
            CreatorTargetId:
              type: integer
              nullable: true
        IconImageAssetId:
          type: integer
        Created:
          type: string
          example: "2024-01-01T00:00:00.000Z"
        Updated:
          type: string
          example: "2024-01-01T00:00:00.000Z"
        PriceInRobux:
          type: integer
          nullable: true
        PriceInTickets:
          type: integer
          nullable: true
        IsNew:
          type: boolean
        IsForSale:
          type: boolean
        IsPublicDomain:
          type: boolean
        IsLimited:
          type: boolean
        IsLimitedUnique:
          type: boolean
        Remaining:
          type: integer
          nullable: true
        Sales:
          type: integer
          nullable: true
        MinimumMembershipLevel:
          type: integer

    # Developer Products
    DeveloperProduct_CreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: The Developer Product's Developer Product ID.
        name:
          type: string
          description: The Developer Product's name.
        Description:
          type: string
          description: The Developer Product's description. Yes, it's capitalized.
        shopId:
          type: integer
          description: The Universe ID this Developer Product is for.
        iconImageAssetId:
          type: integer
          description: The Developer Product's icon image asset ID.
          nullable: true
    DeveloperProduct_DevProductIDDetailsResponse:
      type: object
      properties:
        id:
          type: integer
          description: The Developer Product's Asset ID. You can use this with the `/developer-products/v1/developer-products/{id}/details` endpoint.
        productTypeId:
          type: integer
        isPublicDomain:
          type: boolean
        isForSale:
          type: boolean
        priceInRobux:
          type: integer
        premiumPriceInRobux:
          type: integer
        robloxProductId:
          type: integer
        targetId:
          type: integer
          description: The Developer Product's Developer Product ID.
        assetTypeId:
          type: integer
          nullable: true
        creatorId:
          type: integer
        assetGenres:
          type: integer
        assetCategories:
          type: integer
        affiliateFeePercentage:
          type: integer
          nullable: true
        isNew:
          type: boolean
        created:
          type: string
          example: "2024-01-01T00:00:00.000Z"
        updated:
          type: string
          example: "2024-01-01T00:00:00.000Z"
    DeveloperProduct_DetailsResponse:
      type: object
      properties:
        DisplayName:
          type: string
        DisplayDescription:
          type: string
        DisplayIconImageAssetId:
          type: integer
        PriceInformation:
          type: object
          nullable: true
        TargetId:
          type: integer
          description: The Developer Product's Developer Product ID. You can use this with the `/developer-products/v1/developer-products/{id}` endpoint.
        ProductType:
          type: string
          enum:
            - "Developer Product"
        AssetId:
          type: integer
          description: See `ProductId` below.
        ProductId:
          type: integer
          description: The Developer Product's Product ID. You can use this with the `/developer-products/v1/developer-products/{id}/details` endpoint.
        Name:
          type: string
        Description:
          type: string
        AssetTypeId:
          type: integer
          nullable: true
        Creator:
          type: object
          properties:
            Id:
              type: integer
            Name:
              type: string
              nullable: true
            CreatorType:
              type: string
              nullable: true
            CreatorTargetId:
              type: integer
              nullable: true
        IconImageAssetId:
          type: integer
        Created:
          type: string
          example: "2024-01-01T00:00:00.000Z"
        Updated:
          type: string
          example: "2024-01-01T00:00:00.000Z"
        PriceInRobux:
          type: integer
          nullable: true
        PremiumPriceInRobux:
          type: integer
          nullable: true
        PriceInTickets:
          type: integer
          nullable: true
        IsNew:
          type: boolean
        IsForSale:
          type: boolean
        IsPublicDomain:
          type: boolean
        IsLimited:
          type: boolean
        IsLimitedUnique:
          type: boolean
        Remaining:
          type: integer
          nullable: true
        Sales:
          type: integer
          nullable: true
        MinimumMembershipLevel:
          type: integer
    DeveloperProduct_UpdateBody:
      type: object
      properties:
        Name:
          type: string
          description: The name of the Developer Product.
        Description:
          type: string
          description: The description of the Developer Product.
        PriceInRobux:
          type: integer
          description: The price of the Developer Product in Robux.
    DeveloperProduct_UpdateImageBody:
      type: object
      properties:
        imageFile:
          type: string
          format: binary
          description: The image to upload.
    DeveloperProduct_UpdateImageResponse:
      type: object
      properties:
        imageAssetId:
          type: integer
          description: The Developer Product's new icon image asset ID.
    DeveloperProduct_GetUniverseProductsResponse:
      type: array
      items:
        type: object
        $ref: "#/components/schemas/DeveloperProduct_CreateResponse"

    # Assets
    Assets_MetadataResponse:
      type: object
      properties:
        path:
          type: string
        revisionId:
          type: integer
          description: The version of the asset.
        revisionCreateTime:
          type: string
          description: The timestamp when the asset was last updated.
        assetId:
          type: string
          description: The asset ID as a string.
        displayName:
          type: string
        assetType:
          type: string
          description: "The asset type. See: https://create.roblox.com/docs/reference/engine/enums/AssetType"
        creationContext:
          type: object
          properties:
            creator:
              type: object
              properties:
                userId:
                  type: integer
                  nullable: true
                groupId:
                  type: integer
                  nullable: true
        moderationResult:
          type: object
          properties:
            moderationState:
              type: string
        state:
          type: string
    Assets_BadRequestResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string

    # Asset Permissions
    AssetPermissions_CheckPermissionsBody:
      type: object
      properties:
        requests:
          type: array
          items:
            type: object
            properties:
              subject:
                type: object
                properties:
                  subjectType:
                    type: string
                    enum: ["User", "Group"]
                  subjectId:
                    type: integer
              action:
                type: string
                enum: ["Edit"] # TODO: figure out what other values this can be
              assetId:
                type: integer
    AssetPermissions_CheckPermissionsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              value:
                type: object
                nullable: true
                properties:
                  status:
                    type: string
                    enum: ["NoPermission", "HasPermission"]
              error:
                type: object
                nullable: true
                properties:
                  code:
                    type: string
                    enum: ["CannotManageSubject"]
                  message:
                    type: string
    AssetPermissions_GrantPermissionsBody:
      type: object
      properties:
        requests:
          type: array
          items:
            type: object
            properties:
              subject:
                type: object
                properties:
                  subjectType:
                    type: string
                    enum: ["Universe"]
                  subjectId:
                    type: integer
              action:
                type: string
                enum: ["Use"]

    # Asset Text Filter Settings
    AssetTextFilterSettings_GetUniverseResponse:
      type: object
      properties:
        Profanity:
          type: boolean

    # Universes
    Universe_CreateBody:
      type: object
      properties:
        templatePlaceId:
          type: integer
          description: The place ID of the template to use.
          example: 95206881
    Universe_CreateResponse:
      type: object
      properties:
        rootPlaceId:
          type: integer
          description: The place ID of the root place.
        universeId:
          type: integer
          description: The Universe ID.
    Universe_CreatePlaceResponse:
      type: object
      properties:
        placeId:
          type: integer
          description: The place ID.
    Universe_GetUniverseResponse:
      type: object
      properties:
        universeId:
          type: integer
          description: The Universe ID.

    # Organizations (Creator Groups)
    Orgs_Role:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        name:
          type: string
        color:
          type: string
        updatedTime:
          type: string
          example: "2021-01-01T00:00:0000000Z"
    Orgs_RolePermission:
      type: object
      properties:
        category:
          type: string
          enum: ["Organization", "Experience"]
        operation:
          type: string
          enum: ["ManageMembers", "ManageRoles", "Configure", "Play", "Edit", "ViewAnalytics"]
        enabled:
          type: boolean
    Orgs_GetOrgResponse:
      type: object
      properties:
        id:
          type: string
          example: "0"
        groupId:
          type: string
          example: "0"
    Orgs_GetUsersResponse:
      type: object
      properties:
        users:
          type: array
          items:
            type: object
            properties:
              userId:
                type: integer
              roles:
                type: array
                items:
                  $ref: "#/components/schemas/Orgs_Role"
        pageToken:
          type: string
    Orgs_GetRolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: "#/components/schemas/Orgs_Role"
        pageToken:
          type: string
    Orgs_GetRolePermissionsResponse:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Orgs_RolePermission"
    Orgs_UpdateRolePermissionsBody:
      $ref: "#/components/schemas/Orgs_GetRolePermissionsResponse"
    Orgs_GetUserPermissionsResponse:
      type: object
      properties:
        isOwner:
          type: boolean
        canConfigureOrganization:
          type: boolean
        canManageRoles:
          type: boolean
        canManageMembers:
          type: boolean
        canViewAnalytics:
          type: boolean
        canPlayExperiences:
          type: boolean
        canEditExperiences:
          type: boolean
        canConfigureRevenueDetails:
          type: boolean
        canViewRevenueDetails:
          type: boolean
        canAdvertiseGroup:
          type: boolean

    # Cloud Authentication
    CloudAuthentication_Scopes:
      type: array
      items:
        type: object
        properties:
          scopeType:
            type: string
            example: "universe"
          targetParts:
            type: array
            items:
              type: number
          operations:
            type: array
            items:
              type: string
              example: "read"
    CloudAuthentication_CloudAuthUserConfiguredProperties:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        isEnabled:
          type: boolean
        allowedCidrs:
          type: array
          items:
            type: string
            example: "0.0.0.0/0"
        scopes:
          $ref: "#/components/schemas/CloudAuthentication_Scopes"
    CloudAuthentication_CloudAuthInfo:
      type: object
      properties:
        apikeySecretPreview:
          type: string
        cloudAuthBadStatus:
          type: array
          items:
            type: string
        cloudAuthUserConfiguredProperties:
          $ref: "#/components/schemas/CloudAuthentication_CloudAuthUserConfiguredProperties"
        createdTime:
          type: string
          example: "2021-01-01T00:00:00.000Z"
        id:
          type: string
          example: "00000000-0000-0000-0000-000000000000"
        lastAccessedTime:
          type: string
          example: "2021-01-01T00:00:00.000Z"
        lastGeneratedTime:
          type: string
          example: "2021-01-01T00:00:00.000Z"
        lastGeneratedUserId:
          type: integer
        ownerId:
          type: integer
        ownerType:
          type: string
          enum: ["OWNER_TYPE_USER", "OWNER_TYPE_GROUP"]
        updatedTime:
          type: string
          example: "2021-01-01T00:00:00.000Z"
    CloudAuthentication_CreateApiKeyBody:
      type: object
      properties:
        groupId:
          type: integer
          nullable: true
          description: The group this API key will belong to. If not specified, the API key will be created for the user.
        cloudAuthId:
          type: string
          nullable: true
          description: If specified, it will update the API key with the specified ID. Otherwise, a new API key will be created.
        cloudAuthUserConfiguredProperties:
          $ref: "#/components/schemas/CloudAuthentication_CloudAuthUserConfiguredProperties"
    CloudAuthentication_CloudAuthInfoResponse:
      type: object
      properties:
        cloudAuthInfo:
          $ref: "#/components/schemas/CloudAuthentication_CloudAuthInfo"

    # User Profile
    UserProfile_FieldsEnum:
      type: string
      enum:
        - "names.username"
        - "names.combinedName"
        - "names.alias"
        - "names.displayName"
        - "names.contactName"
        - "names.platformName"
    UserProfile_GetProfilesBody:
      type: object
      properties:
        userIds:
          type: array
          description: The user IDs to get profiles for.
          items:
            type: integer
        fields:
          type: array
          description: The fields to get for each user.
          items:
            type: string
            $ref: "#/components/schemas/UserProfile_FieldsEnum"
    UserProfile_GetProfilesResponse:
      type: object
      properties:
        errors:
          type: array # TODO: figure out what errors this returns
          example: []
          items:
            type: string
        profileDetails:
          type: array
          items:
            type: object
            properties:
              userId:
                type: integer
              names:
                type: object
                properties:
                  username:
                    type: string
                    nullable: true
                  combinedName:
                    type: string
                    nullable: true
                  alias:
                    type: string
                    nullable: true
                  displayName:
                    type: string
                  contactName:
                    type: string
                    nullable: true
                  platformName:
                    type: string
                    nullable: true

    # User Settings
    UserSettings_SetSettingsBody:
      type: object
      anyOf:
        - $ref: "#/components/schemas/UserSettings_GetSettingsResponse"
    UserSettings_SetSettingsResponse:
      type: object
      properties:
        cascadingSettingUpdates:
          type: object
          default: {}
    UserSettings_GetSettingsResponse:
      type: object
      properties:
        phoneNumberDiscoverability:
          type: string
          enum: ["NotDiscoverable", "Discoverable"]
          description: Whether the user can be discovered by phone number.
        contentAgeRestriction:
          type: string
          enum: ["SeventeenPlus", "ThirteenPlus", "NinePlus", "AllAges"]
          description: The user's content age restriction.
        privateServerJoinRestriction:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: The user's private server join restriction.
        themeType:
          type: string
          enum: ["Light", "Dark"]
          description: The user's theme type.
        canUploadContacts:
          type: boolean
          nullable: true
          description: Whether the user can upload contacts.
        whoCanMessageMe:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: The user's who can message me setting.
        whoCanChatWithMe:
          type: string
          enum: ["NoOne", "AllUsers"]
          description: Who you can chat with in-game.
        whoCanChatWithMeInApp:
          type: string
          enum: ["NoOne", "Friends"]
          description: Who you can chat with in the app.
        whoCanJoinMeInExperiences:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: Who you can join you in experiences you're playing.
        voiceChatOptIn:
          type: boolean
          description: Whether you can use voice chat.
        whoCanSeeMyInventory:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: Who can see your inventory.
        whoCanTradeWithMe:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: Who can trade with you.
        tradeQualityFilter:
          type: string
          enum: ["High", "Medium", "Low"]
          description: The trade quality filter. The values might be incorrect, this setting does not appear to be visible on the website anymore.
        xboxCrossPlaySetting:
          type: object
          properties:
            userId:
              type: integer
              description: The user ID of the Xbox Cross Play setting.
            isEnabled:
              type: boolean
              description: Whether Xbox Cross Play is enabled.
            created:
              type: string
              description: The timestamp when the Xbox Cross Play setting was created.
            updated:
              type: string
              description: The timestamp when the Xbox Cross Play setting was last updated.
        privateServerInvitePrivacy:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllAuthenticatedUsers"] # Unsure of why this is different for "AllUsers"
          description: The private server invite privacy setting.
        privateServerPrivacy:
          type: string
          enum: ["NoOne", "Friends", "Following", "Followers", "AllUsers"]
          description: The private server privacy setting.
        boundAuthTokenValidation:
          type: string
          enum: ["Enabled", "Disabled"]
          description: Unsure what this does.
        friendSuggestions:
          type: string
          enum: ["Enabled", "Disabled"]
          description: Unsure what this does.
        updateFriendsAboutMyActivity:
          type: string
          enum: ["No", "Yes"]
          description: Share your activity with your friends.
        allowSellShareData:
          type: string
          enum: ["Disabled", "Enabled"]
          description: Determines if Roblox is allowed to sell your data with advertising partners.
        allowPersonalizedAdvertising:
          type: string
          enum: ["Disabled", "Enabled"]
          description: Determines if Roblox is allowed to personalize ads based on your activity.

    # Marketplace Items
    MarketplaceItems_DetailsBody:
      type: object
      properties:
        itemIds:
          type: array
          items:
            type: string
            example: "00000000-0000-0000-0000-000000000000"
    MarketplaceItems_DetailsResponse:
      type: array
      items:
        type: object
        properties:
          collectibleItemId:
            type: string
          name:
            type: string
          description:
            type: string
          collectibleProductId:
            type: string
          itemType:
            type: integer
          itemRestrictions:
            type: object
            nullable: true
          creatorHasVerifiedBadge:
            type: boolean
          creatorType:
            type: string
            enum: ["Group", "User"]
          itemTargetId:
            type: integer
            description: The Asset ID of the item, as shown in the URL of the item.
          itemTargetType:
            type: integer
          creatorId:
            type: integer
          creatorName:
            type: string
          price:
            type: integer
          lowestPrice:
            type: integer
          hasResellers:
            type: boolean
          unitsAvailableForConsumption:
            type: integer
          offSaleDeadline:
            type: string
            example: "0001-01-01T00:00:00"
          assetStock:
            type: integer
          errorCode:
            type: integer
            nullable: true
          saleLocationType:
            type: string
            enum: ["ShopAndAllExperiences"] # TODO: figure out what other values this can be
          universeIds:
            type: array
            items:
              type: integer
          experiences:
            type: array
            items:
              type: integer # TODO: figure out what this is
          sales:
            type: integer
          lowestResalePrice:
            type: integer
          quantityLimitPerUser:
            type: integer
          lowestAvailableResaleProductId:
            type: string
            nullable: true
          lowestAvailableResaleItemInstanceId:
            type: string
            nullable: true
          resaleRestriction:
            type: integer
          productSaleStatus:
            type: integer
          productTargetId:
            type: integer
    MarketplaceItems_ResellersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              collectibleProductId:
                type: string
              collectibleItemInstanceId:
                type: string
              seller:
                type: object
                properties:
                  hasVerifiedBadge:
                    type: boolean
                  sellerId:
                    type: integer
                  sellerType:
                    type: string
                    enum: ["User"]
                  name:
                    type: string
              price:
                type: integer
              serialNumber:
                type: string
              errorMessage:
                type: string
                default: null
                nullable: true
        previousPageCursor:
          type: string
          nullable: true
        nextPageCursor:
          type: string
          nullable: true

    # Account Switcher
    AccountSwitcher_GetLoggedInUsersMetadataBody:
      type: object
      default: {}
    AccountSwitcher_GetLoggedInUsersMetadataResponse:
      type: object
      properties:
        logged_in_users_metadata:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: integer
              username:
                type: string
              display_name:
                type: string
        active_user_id:
          type: integer
        encrypted_users_data_blob:
          type: string
        removed_user_metadata:
          type: object
          properties:
            user_id:
              type: integer
            username:
              type: string
            display_name:
              type: string

    # Profile Insights
    ProfileInsights_GetMultiInsightsBody:
      type: object
      properties:
        userIds:
          type: array
          items:
            type: integer
        count:
          type: integer
          default: 10
    ProfileInsights_GetMultiInsightsResponse:
      type: object
      properties:
        userInsights:
          type: array
          items:
            type: object
            properties:
              targetUser:
                type: integer
              profileInsights:
                type: array
                items:
                  type: object
                  properties:
                    insightCase:
                      type: integer
                      description: The case ID of the insight. This determines what the insight is.
                    mutualFriendInsight:
                      type: object
                      nullable: true
                      description: The mutual friend insight. This relates to `insightCase` being 1.
                      properties:
                        mutualFriends:
                          type: object
                          properties:
                            "0":
                              type: object
                              properties:
                                username:
                                  type: string
                                displayName:
                                  type: string
                    offlineFrequentsInsight:
                      type: object
                      nullable: true
                      description: The offline frequents insight. This relates to `insightCase` being 3.
                      properties:
                        havePlayedTogether:
                          type: boolean

    # Profile Platform
    ProfilePlatform_GetBody:
      type: object
      properties:
        profileType:
          type: string
          enum: ["User"]
        profileId:
          type: integer
        components:
          type: array
          items:
            type: object
            properties:
              component:
                type: string
                enum: ["About", "Actions", "SocialLinks", "CurrentlyWearing", "ViewFullProfile", "UserProfileHeader"]
        includeComponentOrdering:
          type: boolean
    ProfilePlatform_GetResponse:
      type: object
      properties:
        profileType:
          type: string
          enum: ["User"]
        profileId:
          type: integer
        componentOrdering:
          type: array
          items:
            type: string
            enum: ["About", "Actions", "SocialLinks", "CurrentlyWearing", "ViewFullProfile", "UserProfileHeader"]
        components:
          type: object
          properties:
            UserProfileHeader:
              type: object
              nullable: true
              properties:
                userId:
                  type: integer
                isPremium:
                  type: boolean
                isVerified:
                  type: boolean
                counts:
                  type: object
                  properties:
                    friendsCount:
                      type: integer
                    followersCount:
                      type: integer
                    followingCount:
                      type: integer
                names:
                  type: object
                  properties:
                    primaryName:
                      type: string
                    username:
                      type: string
                contextualInformation:
                  type: object
                  properties:
                    context:
                      type: string
                      enum: ["None"]
                editName:
                  type: string # TODO: figure out if this is really a string
                  nullable: true
            About:
              type: object
              nullable: true
              properties:
                description:
                  type: string
            SocialLinks:
              type: object
              nullable: true
              properties:
                facebook:
                  type: string
                  nullable: true
                twitter:
                  type: string
                  nullable: true
                youtube:
                  type: string
                  nullable: true
                twitch:
                  type: string
                  nullable: true
                guilded:
                  type: boolean
                  nullable: true
            CurrentlyWearing:
              type: object
              nullable: true
              properties:
                assets:
                  type: array
                  items:
                    type: object
                    properties:
                      assetId:
                        type: integer
            ViewFullProfile:
              type: object
              nullable: true
              properties:
                userId:
                  type: integer
            Actions:
              type: object
              nullable: true
              properties:
                primary:
                  type: string
                  enum: ["AddFriend", "EditProfile", "JoinExperience"]
                secondary:
                  type: array
                  nullable: true
                  items:
                    type: string
                    enum: ["QrCode"]
                contextual:
                  type: array
                  items:
                    type: string
                    enum: ["Chat", "EditAlias", "Report", "Block", "Unfriend"]
                  example: ["Chat", "EditAlias", "Report", "Block", "Unfriend"]
                  nullable: true

    # Creator Home
    CreatorHome_GetGroupsResponse:
      type: array
      items:
        type: object
        properties:
          groups:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                roleSetName:
                  type: string

    # Toolbox Service
    ToolboxService_GetItemsDetailsResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              voting:
                type: object
                properties:
                  showVotes:
                    type: boolean
                  upVotes:
                    type: integer
                  downVotes:
                    type: integer
                  canVote:
                    type: boolean
                  userVote:
                    type: integer # TODO: figure out what this is
                    nullable: true
                  hasVoted:
                    type: boolean
                  voteCount:
                    type: integer
                  upVotePercent:
                    type: number
              creator:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  type:
                    type: integer
                  isVerifiedCreator:
                    type: boolean
                  latestGroupUpdaterUserId:
                    type: integer
                  latestGroupUpdaterUserName:
                    type: string
              asset:
                type: object
                properties:
                  audioDetails:
                    type: object
                    nullable: true
                  id:
                    type: integer
                  name:
                    type: string
                  typeId:
                    type: integer
                  assetSubTypes:
                    type: array
                  assetGenres:
                    type: array
                    items:
                      type: string
                  ageGuidelines:
                    type: object
                    nullable: true
                  isEndorsed:
                    type: boolean
                  description:
                    type: string
                  duration:
                    type: integer
                  hasScripts:
                    type: boolean
                  createdUtc:
                    type: string
                    example: "2021-01-01T00:00:0000000Z"
                  updatedUtc:
                    type: string
                    example: "2021-01-01T00:00:0000000Z"
                  creatingUniverseId:
                    type: integer
                    nullable: true
                  isAssetHashApproved:
                    type: boolean
                  visibilityStatus:
                    type: integer
                  socialLinks:
                    type: array
                    items:
                      type: string # TODO: figure out what this is
    ToolboxService_GetCreationsResponse:
      type: object
      properties:
        totalResults:
          type: integer
        filteredKeyword:
          type: string
        searchDebugInfo:
          type: object
          default: unknown
          nullable: true
        queryFacets:
          type: object
          default: unknown
          nullable: true
        imageSearchStatus:
          type: object
          default: unknown
          nullable: true
        previousPageCursor:
          type: string
          nullable: true
        nextPageCursor:
          type: string
          nullable: true
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string

    # Community
    Community_GetUniverseCommunityResponse:
      type: object
      properties:
        communityId:
          type: string
        name:
          type: string
        description:
          type: string
        iconAssetId:
          type: integer
        bannerAssetId:
          type: integer
        visibility:
          type: string
          enum: ["public"]
        createdAt:
          type: string
          example: "2024-04-25T15:02:18"
        announcementChannelId:
          type: string
          nullable: true

    # Voting
    Voting_GetVoteCountResponse:
      type: object
      properties:
        userId:
          type: integer
        voteCount:
          type: integer
        targetType:
          type: string
          enum: ["Place", "Image", "Audio", "Model"]
        platformTypeId:
          type: integer

    # Phone Numbers
    PhoneNumber_PhonePrefixListResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
            description: Country Name
          code:
            type: string
            description: Country Code
          prefix:
            type: string
            description: Phone number prefix
          localizedName:
            type: string
            description: Localized country name
          isDefault:
            type: boolean

    # Share Links
    ShareLinks_GetOrCreateLinkBody:
      type: object
      properties:
        linkType:
          type: string
          enum: ["Profile"]
          description: The type of link to create.
    ShareLinks_GetOrCreateLinkResponse:
      type: object
      properties:
        linkId:
          type: string
        deepLinkUrl:
          type: string
        shortUrl:
          type: string

    DetailsNotFoundResponse:
      type: object
      description: The requested resource was not found.
      properties:
        errorCode:
          type: string
          example: "string" # enum shows first element, but we don't want that really.
          enum:
            - "PassNotFound"
            - "InvalidProductId"
        errorMessage:
          type: string
          description: "A human-readable error message."
        field:
          type: string
          description: "The field that has the error."
  securitySchemes:
    CSRF:
      type: apiKey
      in: header
      name: "x-csrf-token"
      description: "CSRF token. This helps prevent CSRF attacks, and is required for some endpoints."
    UserAccount:
      type: apiKey
      in: cookie
      name: ".ROBLOSECURITY"
      description: "Roblox authentication cookie. This is the least secure way to authenticate, but sometimes it's the only way."
    BrowserTrackerID:
      type: apiKey
      in: cookie
      name: "RBXEventTrackerV2"
    OpenCloudAPIKey:
      type: apiKey
      name: "x-api-key"
      in: header
    OpenCloudOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://apis.roblox.com/oauth/v1/authorize"
          tokenUrl: "https://apis.roblox.com/oauth/v1/token"
          scopes:
            "openid": OpenID Connect
            "profile": Profile
            "asset:read": Read assets
            "asset:write": Write assets
            "creator-store-product:read": Read creator store products
            "creator-store-product:write": Write creator store products
            "group:read": "Read information about groups you're a part of."
            "group:write": "Manage join requests for groups you're a part of and have permission to manage."
            "legacy-universe.badge:write": "Update badges."
            "legacy-universe.following:read": "Read information about experiences you're following."
            "legacy-universe.following:write": "Manage followed experiences."
            "universe-messaging-service:publish": "Publish messages to the messaging service."
            "universe:write": "Update experiences."
            "universe.place:write": "Update places within experiences."
            "universe.subscription-product.subscription:read": "Read information about subscriptions."
            "universe.user-restriction:read": "Read information about users banned from your experiences."
            "universe.user-restriction:write": "Manage user restrictions."
            "user.advanced:read": "Read information about your account."
            "user.inventory-item:read": "Read information about your inventory."
            "user.social:read": "Read information about your social connections."
            "user.user-notification:write": "Send notifications from your experience to your players."
